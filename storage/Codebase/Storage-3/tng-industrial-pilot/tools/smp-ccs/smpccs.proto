//  Copyright (c) 2015 SONATA-NFV, 5GTANGO, Paderborn University
// ALL RIGHTS RESERVED.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Neither the name of the SONATA-NFV, 5GTANGO, Paderborn University
// nor the names of its contributors may be used to endorse or promote
// products derived from this software without specific prior written
// permission.
//
// This work has also been performed in the framework of the 5GTANGO project,
// funded by the European Commission under Grant number 761493 through
// the Horizon 2020 and 5G-PPP programmes. The authors would like to
// acknowledge the contributions of their colleagues of the SONATA
// partner consortium (www.5gtango.eu).

syntax = "proto3";

// Definition of the gRPC server
service SmpSsmControl {
    // A simple RPC to test things.
    rpc PingPong(Ping) returns (Pong) {}
  
    // A server-to-client streaming RPC.
    rpc ControlSsm(SsmState) returns (stream SsmState) {}
}

service SmpSsmUpdate {
    // Send a single state update from clinet to server
    rpc UpdateQuarantine(SsmState) returns (UpdateResult) {}
}


message Ping {
    string text = 1;
}

message Pong {
    string text = 1;
}

message UpdateResult {
    string status = 1;
}

message SsmState {
    string uuid = 1; // uuid of the service instance; primary key
    string name = 2;  // fallback primary key
    uint32 time_created = 3;
    uint32 time_updated = 4;
    string status = 5; // running, fail, error etc.
    bool changed = 6; // internal flag to indicate if update needs to be send out
    // real state:
    bool quarantaine = 10; // service is in quarantaine mode yes/no
}
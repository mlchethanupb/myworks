---  
kind: ConfigMap
apiVersion: v1
metadata:
  name: logstash-static-configfile
  labels:
    pilot: sm
    ns: ns2
    cnf: logstash
data:
  beats2elastic.conf: | 
    input {
      beats {
        port => 5044
        #codec => "json"
        #type => "SuricataIDPS"
      }
    }
    filter {
      mutate {
        add_field => { "[@metadata][source]" => "${SMB_CLIENT_NAME}" }
        add_field => { "[@metadata][user]" => "${SMB_USER_NAME}" }
        add_field => { "[@metadata][elastichost]" => "${ELASTICSEARCH_HOSTS}" }
        }
      grok {
        match => { "%{[@metadata][elastichost]}" => "%{WORD:prot}://%{IP:host}:%{NUMBER:port}" }
        }
      json {
        source => "message"
        target => "temp"
        }
      if [temp][event_type] {
        if [temp][event_type] == "smb" {
          if ([temp][smb][command] == "SMB2_COMMAND_SESSION_SETUP") and [temp][smb][ntlmssp] {
            if [temp][smb][ntlmssp][user] == [@metadata][user] {
              if [temp][smb][ntlmssp][host] == [@metadata][source] {
                drop {}
                }
              else {
                json {
                  source => "message"
                  target => "message"
                  }
                }
              }
            else {
              json {
                source => "message"
                target => "message"
                }
              }
            }
          else {
            drop {}
            }
          }
        else {
          if [temp][event_type] == "dns" or [temp][event_type] == "stats" or [temp][event_type] == "http" or [temp][event_type] == "fileinfo" {
            drop {}
            }
          else {
            if ([temp][event_type] == "flow") and (([temp][dest_port] == 445) or ([temp][dest_port] == 139)) {
              if ([temp][app_proto] == "smb") and ([temp][flow][reason] == "timeout") {
                drop {}
                }
              else { 
                json {
                  source => "message"
                  target => "message"
                  }
                }
              }
            else {
              drop {}
              }
            }
          }
        }
      else {
        drop {}
        }
      }
    output {
      elasticsearch {
        hosts => ["%{host}:%{port}"]
        index => "%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM.dd}"
        manage_template => false
        document_type => "%{[@metadata][type]}"
      }
      file {
        path => "/usr/share/logstash/logs/event-%{+YYYY-MM-dd-HH-mm-ss}.json"
        codec => line { format => "%{message}" }
      }
      stdout { codec => rubydebug }
    }

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: logstash
  labels:
    pilot: sm
    ns: ns2
    cnf: logstash
spec:
  replicas: 1
  selector:
    matchLabels:
      pilot: sm
      ns: ns2
      cnf: logstash
  template:
    metadata:
      labels:
        pilot: sm
        ns: ns2
        cnf: logstash
    spec:
      volumes:
      - name: esdata
        emptyDir: {}
      - name: logstash-config
        configMap:  
          name: logstash-static-configfile
      - name: intrusion-events
        emptyDir: {}
      containers:
      - name: logstash
        image: docker.elastic.co/logstash/logstash:7.3.0
        imagePullPolicy: IfNotPresent
        #args: [
        #  "-vvv",
        #]
        env:
        - name: PIPELINE_WORKERS
          value: "2"
        - name: SMB_CLIENT_NAME
          value: "K8PRDCTRL1"
        - name: SMB_USER_NAME
          value: "stefan"
        - name: ELASTICSEARCH_HOSTS
          value: "http://192.168.1.173:9200"
        - name: xpack.monitoring.enable
          value: "true"
        - name: xpack.monitoring.elasticsearch.hosts
          value: "http://elasticsearch:9200"
        - name: config.support_escapes
          value: "true"
        ports:
        - containerPort: 5044
        - containerPort: 9600
        volumeMounts:
        - mountPath: /usr/share/logstash/pipeline
          name: logstash-config
        - mountPath: /usr/share/logstash/logs
          name: intrusion-events
      - name: flask
        image: mesquitasonata/httptangosrv
        imagePullPolicy: IfNotPresent
        env:
          - name: container_name
            value: logstash
        ports:
        - containerPort: 5000
        volumeMounts:
        - name: intrusion-events
          mountPath: /var/log/logstash
      dnsPolicy: ClusterFirst # service.namespace.svc.cluster.local
      hostNetwork: false
      hostname: logstash

---
kind: Service
apiVersion: v1
metadata:
  name: flask
  labels:
    pilot: sm
    ns: ns2
    cnf: flask
spec:
  type: LoadBalancer
  selector:
    cnf: flask
  ports:
  - name: h-80
    protocol: TCP
    port: 80
    targetPort: 80
  - name: h-443
    protocol: TCP
    port: 443
    targetPort: 443
  - name: h-5000
    protocol: TCP
    port: 5000
    targetPort: 5000

---
kind: Service
apiVersion: v1
metadata:
  name: logstash
  labels:
    pilot: sm
    ns: ns2
    cnf: logstash
spec:
  type: LoadBalancer
  selector:
    cnf: logstash
  ports:
  - name: l-5044
    protocol: TCP
    port: 5044
    targetPort: 5044
  - name: l-9600
    protocol: TCP
    port: 9600
    targetPort: 9600
  #clusterIP: 10.x.x.x
  #loadBalancerIP: 172.31.14.248-9 (ALB-PRD)
#status:
  #loadBalancer:
    #ingress:
    #- ip: 172.31.14.x
#https://kubernetes.io/docs/concepts/services-networking/#loadbalancer

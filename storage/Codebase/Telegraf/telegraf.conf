# Telegraf configuration


# Telegraf is entirely plugin driven. All metrics are gathered from the
# declared inputs, and sent to the declared outputs.

# Plugins must be declared in here to be active.
# To deactivate a plugin, comment out the name and any variables.

# Use 'telegraf -config telegraf.conf -test' to see what metrics a config
# file would generate.

# Global tags can be specified here in key="value" format.
[global_tags]
  # dc = "us-east-1" # will tag all metrics with dc=us-east-1
  # rack = "1a"

# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "10s"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  ## Telegraf will cache metric_buffer_limit metrics for each output, and will
  ## flush this buffer on a successful write.
  metric_buffer_limit = 1000
  ## Flush the buffer whenever full, regardless of flush_interval.
  flush_buffer_when_full = true

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "0s"

  ## Default flushing interval for all outputs. You shouldn't set this below
  ## interval. Maximum flush_interval will be flush_interval + flush_jitter
  flush_interval = "10s"
  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "0s"

  ## Logging configuration:
  ## Run telegraf in debug mode
  debug = false
  ## Run telegraf in quiet mode
  quiet = false
  ## Specify the log file name. The empty string means to log to stdout.
  ##logfile = "/Program Files/Telegraf/telegraf_sql.log"

  ## Override default hostname, if empty use os.Hostname()
  hostname = "DEMOHOST"


###############################################################################
#                                  OUTPUTS                                    #
###############################################################################

# Configuration for influxdb server to send metrics to
[[outputs.influxdb]]
  # The full HTTP or UDP endpoint URL for your InfluxDB instance.
  # Multiple urls can be specified but it is assumed that they are part of the same
  # cluster, this means that only ONE of the urls will be written to each interval.
  # urls = ["udp://127.0.0.1:8089"] # UDP endpoint example
  urls = ["http://127.0.0.1:8086"] # required
  # The target database for metrics (telegraf will create it if not exists)
  # database = "telegraf" # required
  database = "telegraf"
  # Precision of writes, valid values are "ns", "us" (or "µs"), "ms", "s", "m", "h".
  # note: using second precision greatly helps InfluxDB compression
  precision = "s"

  ## Write timeout (for the InfluxDB client), formatted as a string.
  ## If not provided, will default to 5s. 0s means no timeout (not recommended).
  timeout = "5s"
  # username = "telegraf"
  # password = "metricsmetricsmetricsmetrics"
  # Set the user agent for HTTP POSTs (can be useful for log differentiation)
  # user_agent = "telegraf"
  # Set UDP payload size, defaults to InfluxDB UDP Client default (512 bytes)
  # udp_payload = 512


###############################################################################
#                                  INPUTS                                     #
###############################################################################

# Windows Performance Counters plugin.
# These are the recommended method of monitoring system metrics on windows,
# as the regular system plugins (inputs.cpu, inputs.mem, etc.) rely on WMI,
# which utilize more system resources.
#
# See more configuration examples at:
#   https://github.com/influxdata/telegraf/tree/master/plugins/inputs/win_perf_counters

[[inputs.opcua]]
  ## Device name
  # name = "localhost"
  #
  ## OPC UA Endpoint URL
  # endpoint = "opc.tcp://localhost:4840"
  #
  ## Maximum time allowed to establish a connect to the endpoint.
  # connect_timeout = "10s"
  #
  ## Maximum time allowed for a request over the estabilished connection.
  # request_timeout = "5s"
  #
  ## Security policy, one of "None", "Basic128Rsa15", "Basic256",
  ## "Basic256Sha256", or "auto"
  # security_policy = "auto"
  #
  ## Security mode, one of "None", "Sign", "SignAndEncrypt", or "auto"
  # security_mode = "auto"
  #
  ## Path to cert.pem. Required when security mode or policy isn't "None".
  ## If cert path is not supplied, self-signed cert and key will be generated.
  # certificate = "/etc/telegraf/cert.pem"
  #
  ## Path to private key.pem. Required when security mode or policy isn't "None".
  ## If key path is not supplied, self-signed cert and key will be generated.
  # private_key = "/etc/telegraf/key.pem"
  #
  ## Authentication Method, one of "Certificate", "UserName", or "Anonymous".  To
  ## authenticate using a specific ID, select 'Certificate' or 'UserName'
  # auth_method = "Anonymous"
  #
  ## Username. Required for auth_method = "UserName"
  # username = ""
  #
  ## Password. Required for auth_method = "UserName"
  # password = ""
  #
  ## Node ID configuration
  ## name       			- the variable name
  ## namespace  			- integer value 0 thru 3
  ## identifier_type		- s=string, i=numeric, g=guid, b=opaque
  ## identifier			- tag as shown in opcua browser
  ## data_type  			- boolean, byte, short, int, uint, uint16, int16,
  ##                        uint32, int32, float, double, string, datetime, number
  ## Example:
  ## {name="ProductUri", namespace="0", identifier_type="i", identifier="2262", data_type="string", description="http://open62541.org"}
  nodes = [
    {name="", namespace="", identifier_type="", identifier="", data_type="", description=""},
    {name="", namespace="", identifier_type="", identifier="", data_type="", description=""},
  ]

   
 # Windows Performance Counters plugin.
# See more configuration examples at:
#   https://github.com/influxdata/telegraf/tree/master/plugins/inputs/win_perf_counters
 
[[inputs.win_perf_counters]]
  PrintValid = false
  [[inputs.win_perf_counters.object]]
    # Processor usage, alternative to native, reports on a per core.
    ObjectName = "Processor"
    Instances = ["*"]
    Counters = [
      "% Idle Time",
      "% Interrupt Time",
      "% Privileged Time",
      "% User Time",
      "% Processor Time",
    ]
    Measurement = "win_cpu"
    
    [[inputs.win_perf_counters.object]]
      # Disk times and queues
      ObjectName = "LogicalDisk"
      Instances = ["*"]
      Counters = [
        "% Idle Time",
                                "% Disk Time",
                                "% Disk Read Time",
        "% Disk Write Time",
                                "% User Time",
                                "Current Disk Queue Length",
                                "% Free Space"
      ]    
      Measurement = "win_disk"
 
    [[inputs.win_perf_counters.object]]
      # Disk times and queues
      ObjectName = "PhysicalDisk"
      Instances = ["*"]
      Counters = [
        "Disk Read Bytes/sec",
                                "Disk Write Bytes/sec",
                                "Avg. Disk Queue Length",
                                "Current Disk Queue Length",
                                "Avg. Disk sec/Read",
                                "Avg. Disk sec/Write",
                                "Split IO/sec",
      ]
      Measurement = "win_physdisk"
 
    [[inputs.win_perf_counters.object]]
      # Disk times and queues
      ObjectName = "Network Interface"
      Instances = ["*"]
      Counters = [
        "Bytes Received/sec",
                                "Bytes Sent/sec",
                                "Packets Sent/sec",
                                "Packets Received/sec",
      ]
      Measurement = "win_net"
 
  [[inputs.win_perf_counters.object]]
    ObjectName = "System"
    Counters = [
      "Context Switches/sec",
      "System Calls/sec",
      "Processor Queue Length",
                  "Threads",
                  "Processes",
                  "System Up Time"
    ]
    # Use 6 dashes (-) to remove the Instance bit from the query.
    Instances = ["------"]
    Measurement = "win_system"
 
  [[inputs.win_perf_counters.object]]
    ObjectName = "Memory"
    Counters = [
      "Available Bytes",
      "Cache Faults/sec",
      "Demand Zero Faults/sec",
      "Page Faults/sec",
      "Pages/sec",
      "Page Reads/sec",
      "Page Writes/sec",
      "Transition Faults/sec",
      "Pool Nonpaged Bytes",
      "Pool Paged Bytes",
      "Cache Bytes",
    ]
    # Use 6 dashes (-) to remove the Instance bit from the query.
    Instances = ["------"]
    Measurement = "win_mem"
 
  [[inputs.win_perf_counters.object]]
    ObjectName = "Process"
    Counters = [
                                "% Processor Time",
                                "Handle Count",
                                "Private Bytes",
                                "Thread Count",
                                "Virtual Bytes",
                                "Working Set"
                ]
    Instances = ["*"]
    Measurement = "win_proc"
 
  [[inputs.win_perf_counters.object]]
    ObjectName = "HTTP Service Request Queues"
    Instances = ["*"]
    Counters = [
                                "CurrentQueueSize",
                                "RejectedRequests"
                ]
    Measurement = "win_http_queues"
 
  [[inputs.win_perf_counters.object]]
    ObjectName = "ASP.NET Applications"
    Counters = [
                                "Errors Total/Sec",
                                "Requests Executing",
                                "Requests in Application Queue",
                                "Requests/Sec",
                                "Managed Memory Used (estimated)",
                                "% Managed Processor Time (estimated)",
                ]
    Instances = ["*"]
    Measurement = "win_aspnet_app"
 
  [[inputs.win_perf_counters.object]]
    ObjectName = "ASP.NET"
    Counters = [
                                "Application Restarts",
                                "Request Wait Time",
                                "Requests Current",
                                "Requests Queued",
                                "Requests Rejected"
                ]
    Instances = ["*"]
    Measurement = "win_aspnet"